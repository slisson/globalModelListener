package de.slisson.mps.globalModelListener.plugin;

/*Generated by MPS */

import org.jetbrains.mps.openapi.module.SRepositoryListener;
import org.jetbrains.mps.openapi.module.SModuleListener;
import org.jetbrains.mps.openapi.model.SModelListener;
import org.jetbrains.mps.openapi.model.SNodeChangeListener;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.module.SRepository;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.apache.log4j.Level;
import jetbrains.mps.baseLanguage.logging.runtime.model.LoggingRuntime;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.module.SModuleReference;
import org.jetbrains.mps.openapi.model.SModelReference;
import org.jetbrains.mps.openapi.module.SDependency;
import org.jetbrains.mps.openapi.language.SLanguage;
import org.jetbrains.mps.openapi.event.SPropertyChangeEvent;
import org.jetbrains.mps.openapi.event.SReferenceChangeEvent;
import org.jetbrains.mps.openapi.event.SNodeAddEvent;
import org.jetbrains.mps.openapi.event.SNodeRemoveEvent;

public class GlobalSModelListener implements SRepositoryListener, SModuleListener, SModelListener, SNodeChangeListener {
  private static final Logger LOG = LogManager.getLogger(GlobalSModelListener.class);

  protected SRepository myRepository;
  protected boolean myActive;

  private List<SRepository> myRepos = ListSequence.fromList(new ArrayList<SRepository>());
  private List<SModule> myModules = ListSequence.fromList(new ArrayList<SModule>());
  private List<SModel> myModels = ListSequence.fromList(new ArrayList<SModel>());

  public GlobalSModelListener(SRepository repository) {
    myRepository = repository;
  }

  public void start() {
    myRepository.getModelAccess().runReadAction(new Runnable() {
      public void run() {
        start(myRepository);
      }
    });
    myActive = true;
  }

  protected void start(SRepository repo) {
    ListSequence.fromList(myRepos).addElement(repo);
    repo.addRepositoryListener(this);
    for (SModule module : Sequence.fromIterable(myRepository.getModules())) {
      start(module);
    }
  }

  protected void start(SModule module) {
    ListSequence.fromList(myModules).addElement(module);
    module.addModuleListener(this);
    for (SModel model : Sequence.fromIterable(module.getModels())) {
      start(model);
    }
  }

  protected void start(SModel model) {
    ListSequence.fromList(myModels).addElement(model);
    model.addModelListener(this);
    model.addChangeListener(this);
  }

  public void stop() {
    myActive = false;
    myRepository.getModelAccess().runReadAction(new Runnable() {
      public void run() {
        stop(myRepository);
        for (SRepository repo : ListSequence.fromList(myRepos)) {
          if (LOG.isEnabledFor(Level.WARN)) {
            LoggingRuntime.legacyLog(Level.WARN, "listener was not removed from SRepository: " + repo, GlobalSModelListener.class, null);
          }
          repo.removeRepositoryListener(GlobalSModelListener.this);
        }
        for (SModule m : ListSequence.fromList(myModules)) {
          if (LOG.isEnabledFor(Level.WARN)) {
            LoggingRuntime.legacyLog(Level.WARN, "listener was not removed from SModule: " + m, GlobalSModelListener.class, null);
          }
          m.removeModuleListener(GlobalSModelListener.this);
        }
        for (SModel m : ListSequence.fromList(myModels)) {
          if (LOG.isEnabledFor(Level.WARN)) {
            LoggingRuntime.legacyLog(Level.WARN, "listener was not removed from SModel: " + m, GlobalSModelListener.class, null);
          }
          m.removeModelListener(GlobalSModelListener.this);
          m.removeChangeListener(GlobalSModelListener.this);
        }
      }
    });
  }

  protected void stop(SRepository repo) {
    for (SModule module : Sequence.fromIterable(repo.getModules())) {
      stop(module);
    }
    repo.removeRepositoryListener(this);
    ListSequence.fromList(myRepos).removeElement(repo);
  }

  protected void stop(SModule module) {
    for (SModel model : Sequence.fromIterable(module.getModels())) {
      stop(model);
    }
    module.removeModuleListener(this);
    ListSequence.fromList(myModules).removeElement(module);
  }

  protected void stop(SModel model) {
    model.removeModelListener(this);
    model.removeChangeListener(this);
    ListSequence.fromList(myModels).removeElement(model);
  }

  @Override
  public void moduleAdded(@NotNull SModule module) {
    if (myActive) {
      start(module);
    }
  }
  @Override
  public void beforeModuleRemoved(@NotNull SModule module) {
    if (myActive) {
      stop(module);
    }
  }
  @Override
  public void moduleRemoved(@NotNull SModuleReference reference) {
  }
  @Override
  public void commandStarted(SRepository repository) {
  }
  @Override
  public void commandFinished(SRepository repository) {
  }
  @Deprecated
  @Override
  public void updateStarted(SRepository repository) {
  }
  @Deprecated
  @Override
  public void updateFinished(SRepository repository) {
  }
  @Deprecated
  @Override
  public void repositoryCommandStarted(SRepository repository) {
  }
  @Deprecated
  @Override
  public void repositoryCommandFinished(SRepository repository) {
  }




  @Override
  public void modelAdded(SModule module, SModel model) {
    if (myActive) {
      start(model);
    }
  }
  @Override
  public void beforeModelRemoved(SModule module, SModel model) {
    if (myActive) {
      stop(model);
    }
  }
  @Override
  public void modelRemoved(SModule module, SModelReference reference) {
  }
  @Override
  public void beforeModelRenamed(SModule module, SModel model, SModelReference reference) {
  }
  @Override
  public void modelRenamed(SModule module, SModel model, SModelReference reference) {
  }
  @Override
  public void dependencyAdded(SModule module, SDependency dependency) {
  }
  @Override
  public void dependencyRemoved(SModule module, SDependency dependency) {
  }
  @Override
  public void languageAdded(SModule module, SLanguage language) {
  }
  @Override
  public void languageRemoved(SModule module, SLanguage language) {
  }
  @Override
  public void moduleChanged(SModule module) {
  }




  @Override
  public void modelLoaded(SModel model, boolean partially) {
  }
  @Override
  public void modelReplaced(SModel model) {
  }
  @Override
  public void modelUnloaded(SModel model) {
  }
  @Override
  public void modelSaved(SModel model) {
  }
  @Override
  public void modelAttached(SModel model, SRepository repository) {
  }
  @Override
  public void modelDetached(SModel model, SRepository repository) {
  }
  @Override
  public void conflictDetected(SModel model) {
  }
  @Override
  public void problemsDetected(SModel model, Iterable<SModel.Problem> iterable) {
  }




  @Override
  public void propertyChanged(@NotNull SPropertyChangeEvent event) {
  }
  @Override
  public void referenceChanged(@NotNull SReferenceChangeEvent event) {
  }
  @Override
  public void nodeAdded(@NotNull SNodeAddEvent event) {
  }
  @Override
  public void nodeRemoved(@NotNull SNodeRemoveEvent event) {
  }
}
